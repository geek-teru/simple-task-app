// Code generated by MockGen. DO NOT EDIT.
// Source: task.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	ent "github.com/geek-teru/simple-task-app/ent"
	gomock "github.com/golang/mock/gomock"
)

// MockTaskRepositoryInterface is a mock of TaskRepositoryInterface interface.
type MockTaskRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryInterfaceMockRecorder
}

// MockTaskRepositoryInterfaceMockRecorder is the mock recorder for MockTaskRepositoryInterface.
type MockTaskRepositoryInterfaceMockRecorder struct {
	mock *MockTaskRepositoryInterface
}

// NewMockTaskRepositoryInterface creates a new mock instance.
func NewMockTaskRepositoryInterface(ctrl *gomock.Controller) *MockTaskRepositoryInterface {
	mock := &MockTaskRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepositoryInterface) EXPECT() *MockTaskRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockTaskRepositoryInterface) CreateTask(ctx context.Context, task *ent.Task) (*ent.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", ctx, task)
	ret0, _ := ret[0].(*ent.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTaskRepositoryInterfaceMockRecorder) CreateTask(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTaskRepositoryInterface)(nil).CreateTask), ctx, task)
}

// DeleteTask mocks base method.
func (m *MockTaskRepositoryInterface) DeleteTask(ctx context.Context, taskid, userid int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", ctx, taskid, userid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTaskRepositoryInterfaceMockRecorder) DeleteTask(ctx, taskid, userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTaskRepositoryInterface)(nil).DeleteTask), ctx, taskid, userid)
}

// GetTaskById mocks base method.
func (m *MockTaskRepositoryInterface) GetTaskById(ctx context.Context, taskid, userid int) (*ent.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskById", ctx, taskid, userid)
	ret0, _ := ret[0].(*ent.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskById indicates an expected call of GetTaskById.
func (mr *MockTaskRepositoryInterfaceMockRecorder) GetTaskById(ctx, taskid, userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskById", reflect.TypeOf((*MockTaskRepositoryInterface)(nil).GetTaskById), ctx, taskid, userid)
}

// ListTask mocks base method.
func (m *MockTaskRepositoryInterface) ListTask(ctx context.Context, userid, offset, limit int) ([]*ent.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTask", ctx, userid, offset, limit)
	ret0, _ := ret[0].([]*ent.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTask indicates an expected call of ListTask.
func (mr *MockTaskRepositoryInterfaceMockRecorder) ListTask(ctx, userid, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTask", reflect.TypeOf((*MockTaskRepositoryInterface)(nil).ListTask), ctx, userid, offset, limit)
}

// UpdateTask mocks base method.
func (m *MockTaskRepositoryInterface) UpdateTask(ctx context.Context, task *ent.Task, taskid, userid int) (*ent.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", ctx, task, taskid, userid)
	ret0, _ := ret[0].(*ent.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockTaskRepositoryInterfaceMockRecorder) UpdateTask(ctx, task, taskid, userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockTaskRepositoryInterface)(nil).UpdateTask), ctx, task, taskid, userid)
}
